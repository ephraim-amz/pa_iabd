use rand::distributions::{Distribution, Standard, Uniform};
use rand::Rng;

// mod modele_linaire;


fn main() {
    // let model = modele_linaire::new(2);

    /*
        let training_data = vec![
            vec![1.0, 1.0],
            vec![2.0, 3.0],
            vec![3.0, 3.0],
        ];
        let labels = vec![1.0, -1.0, 1.0];
    */
    let mut rng = rand::thread_rng();
    let dist = Uniform::new_inclusive(-1.0, 1.0);
    let mut v: Vec<f32> = Vec::with_capacity(3);
    for i in 0..v.capacity(){
        v.push(rng.sample(dist));
    }
    println!("{:?}", v);

    // modele_linaire::train_classification(model, training_data.into_iter().flatten().collect(), labels.as_ptr(),training_data.len(), labels.len(), 0.001, 200);


    // let prediction = modele_linaire::predict_classification(unsafe { model }, training_data.into_iter().flatten().collect(), training_data.len());
    // unsafe { println!("Prediction: {}", prediction); }


    // Libération de la mémoire occupée par le modèle
    // modele_linaire::delete_model(model);
}
